import datetime

import requests
from requests.exceptions import MissingSchema, InvalidURL, ConnectionError
from urllib3.exceptions import LocationParseError

from bot.create_bot import bot, config
from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from database import db_func
from filters.filters import commercial_correct_amount_times, commercial_text_or_media
from lexicon.LEXICON_RU import LEXICON
from service.posts import utc
from worker.celery import send_commercial_to_chat, send_commercial_task

router = Router()


class FSMCommercial(StatesGroup):
    commercial = State()
    media = State()
    link = State()
    button_text = State()
    pre_publish = State()
    amount_times = State()
    time = State()


@router.message(Command(commands=['cancel']), F.text, StateFilter(FSMCommercial))
async def cancel_command(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π —Ä–µ–∫–ª–∞–º—ã"""
    await state.clear()
    await message.answer('–ó–∞–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ–∫–ª–∞–º—ã –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ.\n\n–ï—Å–ª–∏ –∫—Ç–æ –∑–∞—Ö–æ—á–µ—Ç –µ—â–µ —Ä–µ–∫–ª–∞–º—ã, —Ç—ã –∑–Ω–∞–µ—à—å —á—Ç–æ –¥–µ–ª–∞—Ç—åüòÅ')


@router.message(Command(commands=['commercial']), F.text)
async def commercial_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ news –∏ –∞–∫—Ç–∏–≤–∞—Ü–∏—è –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π"""
    if message.from_user.id == int(config.tg_bot.admin_id):
        await state.set_state(FSMCommercial.commercial)
        await message.answer(
            '–í—ã –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—é —Ñ–æ—Ä–º—ã. –ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ /cancel\n\n'
            '–í —Å–ª—É—á–∞–µ –µ—Å–ª–∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ –Ω–µ —Ç–æ, —á—Ç–æ –æ—Ç –≤–∞—Å –æ–∂–∏–¥–∞–µ—Ç –±–æ—Ç, –æ–Ω —É–¥–∞–ª–∏—Ç –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n'
            '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã')
    else:
        await message.answer(text=LEXICON['other'])


@router.message(F.text, StateFilter(FSMCommercial.commercial))
async def commercial_photo_or_video(message: Message, state: FSMContext):
    """–°–ø—Ä–∞—â–∏–≤–∞–µ–º –±—É–¥–µ—Ç –ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã"""
    await state.update_data(commercial=message.text, times=1)
    await state.set_state(FSMCommercial.media)
    await message.answer('–•–æ—Ä–æ—à–æ, —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω.\n\n–ï—Å–ª–∏ –±—É–¥–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –∏–ª–∏ –≤–∏–¥–µ–æ –∫ –ø–æ—Å—Ç—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏—Ö.\n'
                         '–í –∏–Ω–æ–º —Å–ª—É—á–∞–µ –≤–≤–µ–¥–∏—Ç–µ "No"')


@router.message(StateFilter(FSMCommercial.commercial))
async def commercial_photo_or_video_not_text(message: Message):
    await message.delete()


@router.message(StateFilter(FSMCommercial.media), F.photo | F.text | F.video, commercial_text_or_media)
async def commercial_media_content(message: Message, state: FSMContext):
    if message.text == 'No':
        await state.set_state(FSMCommercial.link)
        await state.update_data(content_type=None,
                                file_id=None,
                                file_unique_id=None)
        await message.answer(
            '–ü–æ—Å—Ç –±—É–¥–µ—Ç –±–µ–∑ –º–µ–¥–∏–∞.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—Å–æ–≤—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    elif message.video is not None:
        await state.update_data(content_type='video',
                                file_id=message.video.file_id,
                                file_unique_id=message.video.file_unique_id)
        await state.set_state(FSMCommercial.link)
        await message.answer(
            '–í–∞—à–µ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω–æ.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—Å–æ–≤—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    elif message.photo is not None:
        await state.update_data(content_type='photo',
                                file_id=message.photo[-1].file_id,
                                file_unique_id=message.photo[-1].file_unique_id)
        await state.set_state(FSMCommercial.link)
        await message.answer(
            '–í–∞—à–µ —Ñ–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ.\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É, –∫—É–¥–∞ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∞–¥—Ä–µ—Å—Å–æ–≤—ã–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    else:
        await message.delete()


@router.message(StateFilter(FSMCommercial.media), ~F.photo | ~F.text | ~F.video, )
async def commercial_not_media_content(message: Message):
    await message.delete()


@router.message(StateFilter(FSMCommercial.link), F.text)
async def commercial_get_link(message: Message, state: FSMContext):
    try:
        response = requests.get(message.text)
    except (MissingSchema, InvalidURL, ConnectionError, LocationParseError):
        await message.answer("–°—Å—ã–ª–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        if response.status_code == 200:
            await message.answer('–°—Å—ã–ª–∫–∞ –≤ –ø–æ—Ä—è–¥–∫–µ')
        else:
            await message.answer(f'–í—Ä–æ–¥–µ –≥—Ä—É–∑–∏—Ç—Å—è. –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞ {response.status_code}')
        await message.answer(
            '–û—Ç–ª–∏—á–Ω–æ.\n–¢–µ–ø–µ—Ä—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏. –¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ—Ä–æ—Ç–∫–∏–º. –î–æ 30 —Å–∏–º–≤–æ–ª–æ–≤.\n\n'
            '–ù–∞–ø—Ä–∏–º–µ—Ä: –°—Å—ã–ª–∫–∞ –Ω–∞ –≥—Ä—É–ø–ø—É')
        await state.update_data(link=message.text)
        await state.set_state(FSMCommercial.button_text)
        print(await state.get_state())


@router.message(StateFilter(FSMCommercial.link))
async def commercial_not_get_link(message: Message):
    await message.delete()


@router.message(StateFilter(FSMCommercial.button_text), F.text)
async def commercial_button_text(message: Message, state: FSMContext):
    if len(message.text) < 30:
        await state.update_data(button_text=message.text)
        data = await state.get_data()
        await send_commercial_to_chat(data, config.tg_bot.admin_id)
        await message.answer(
            '–í–æ—Ç –∫–∞–∫ –±—É–¥–µ—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ä–µ–∫–ª–∞–º–∞. –ü—É–±–ª–∏–∫—É–µ–º –∏–ª–∏ —á—Ç–æ —Ç–æ –∏—Å–ø—Ä–∞–≤–∏–º(–ø—Ä–∏–¥–µ—Ç—Å—è –≤—Å–µ –∑–∞–ø–æ–ª–Ω—è—Ç—å –∑–∞–Ω–æ–≤–æ)',
            reply_markup=InlineKeyboardBuilder().row(
                InlineKeyboardButton(text='–ü—É–±–ª–∏–∫—É–µ–º', callback_data='send'),
                InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='refill')
            ).as_markup())
        await state.set_state(FSMCommercial.pre_publish)
    elif not message.text:
        await message.delete()
    else:
        await message.answer('–ö–∞–∫–æ–π —É —Ç–µ–±—è –¥–ª–∏–∏–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç. –ù—É–∂–Ω–æ –ø–æ –∫–æ—Ä–æ—á–µ.')


@router.message(StateFilter(FSMCommercial.button_text))
async def commercial_not_button_text(message: Message):
    await message.delete()


@router.callback_query(StateFilter(FSMCommercial.pre_publish))
async def commercial_publishing(callback: CallbackQuery, state: FSMContext):
    if callback.data == 'refill':
        await state.clear()
        await state.set_state(FSMCommercial.commercial)
        await callback.message.edit_text(
            '–•–æ—Ä–æ—à–æ. –î–∞–≤–∞–π –∏—Å–ø—Ä–∞–≤–∏–º —ç—Ç—É —Ä–µ–∫–ª–∞–º—É.\n–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å –µ—ë –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –≤–≤–µ–¥–∏—Ç–µ /cancel\n\n'
            '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã')
    elif callback.data == 'send':
        await state.set_state(FSMCommercial.amount_times)
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–∑, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É.'
                                         '(–†–µ–∫–ª–∞–º–∞ –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è)')
    else:
        await callback.message.edit_text('–ù—É –≤–æ—Ç, —è —Å–ª–æ–º–∞–ª—Å—è. –í—ã–∫–ª—é—á–∞—é –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π')
        await state.clear()


@router.message(StateFilter(FSMCommercial.pre_publish))
async def commercial_not_publishing(message: Message):
    await message.delete()


@router.message(StateFilter(FSMCommercial.amount_times), F.text, commercial_correct_amount_times)
async def commercial_amount_times(message: Message, state: FSMContext):
    times = int(message.text)
    if times > 30:
        await message.answer('–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π.\n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 30')
    elif times <= 0:
        await bot.send_sticker(message.from_user.id,
                               sticker='CAACAgIAAxkBAAI5vmTM8Wnxa37WLECFEh9ON2dvFYHpAAI3AwACtXHaBqSAkerG-Gh2LwQ')
        await message.answer('–î–ª–∏–Ω–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –º–µ–Ω—å—à–µ 1. Baka')
    else:
        await state.update_data(times=message.text)
        await state.set_state(FSMCommercial.time)
        await message.answer(
            '–ù—É –∏ —Ç–µ–ø–µ—Ä—å —Å–∞–º–æ–µ –≥–ª–∞–≤–Ω–æ–µ.\n\n–í –∫–∞–∫–æ–µ –≤—Ä–µ–º—è –±—É–¥–µ–º –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–µ–∫–ª–∞–º—É?\n'
            '(–†–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç –ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –≤—Ä–µ–º—è)\n\n'
            '–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º')


@router.message(StateFilter(FSMCommercial.amount_times))
async def commercial_not_amount_times(message: Message):
    await message.delete()


@router.message(StateFilter(FSMCommercial.time), F.text)
async def commercial_publish_time(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–∞–µ–º —Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –∏ –¥–∞—Ç—É –∏ —Å—Ç–∞–≤–∏–º –∑–∞–¥–∞—á—É –¥–ª—è celery"""
    try:
        mess = message.text
        time = datetime.datetime.strptime(mess + ':00.156478', "%Y-%m-%d %H:%M:%S.%f")
    except ValueError:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n–§–æ—Ä–º–∞—Ç: –≥–≥–≥–≥-–º–º-–¥–¥ —á—á:–º–º.\n–ü—Ä–∏–º–µ—Ä: 2023-02-04 14:25')
    else:
        if time < datetime.datetime.now() + datetime.timedelta(hours=utc):
            await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ')
        else:
            data = await state.get_data()
            days = "–¥–Ω—è" if 1 < int(data.get('times')) < 5 else '–¥–Ω–µ–π'
            commercial_id = await db_func.commercial_new(data)
            commercial = await db_func.get_commercial(commercial_id)
            for i in range(int(data['times'])):
                send_commercial_task.apply_async((commercial, config.tg_bot.channel_id),
                                                 eta=time - datetime.timedelta(hours=utc) + datetime.timedelta(days=i))
            await message.answer(f'–†–µ–∫–ª–∞–º–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –≥—Ä—É–ø–ø–µ {str(time)[:16]} –∫–∞–∂–¥—ã–π –¥–µ–Ω—å '
                                 f'–Ω–∞ –ø—Ä–æ—Ç—è–∂–µ–Ω–∏–∏ {data["times"]} {days}')
            await state.clear()


@router.message(StateFilter(FSMCommercial.time))
async def commercial_not_publish_time(message: Message):
    await message.delete()
